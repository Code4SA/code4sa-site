// Generated by CoffeeScript 1.8.0
(function() {
  var BubbleChart, root,
    __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.hide_years = __bind(this.hide_years, this);
      this.display_years = __bind(this.display_years, this);
      this.move_towards_year = __bind(this.move_towards_year, this);
      this.display_by_year = __bind(this.display_by_year, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      var max_amount;
      this.data = data;
      this.width = 1000;
      this.height = 600;
      var departments = [
          "Community Services",
          "Compliance and Auxiliary Services",
          "Corporate Services",
          "Health",
          "Eco, Env & Spatial Planning",
          "Finance",
          "Human Settlements",
          "Utility Services",
          "Office of City Manager",
          "Safety & Security",
          "Social Development",
          "Tourism, Events & Marketing",
          "Transport for Cape Town",
          "Transport, Roads & Stormwater",
          "Unknown"
      ]
      this.tooltip = CustomTooltip("tenders_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };

      this.year_centers = {}
      this.dept_titles = {}
      for (idx in departments) {
        var dept = departments[idx]
        var column_width = this.width / 4.5;
        var row_height = this.height / 5;
        this.year_centers[dept] = {
            x: column_width + (idx % 4) * column_width - 100,
            y: row_height + Math.floor(idx / 4) * row_height
        }
        this.dept_titles[dept] = {
            x: column_width + (idx % 4) * column_width - 100,
            y: row_height + Math.floor(idx / 4) * row_height
        }
      }
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal()
          .domain(departments)
          .range(d3.scale.category20().range())

      max_amount = d3.max(this.data, function(d) {
        return parseInt(d.value);
      });
      this.radius_scale = d3.scale.sqrt().domain([0, max_amount]).range([0, 80]);
      this.create_nodes();
      this.create_vis();
    }

    BubbleChart.prototype.create_nodes = function() {
      this.data.forEach((function(_this) {
        return function(d) {
          var node = {
            id: d.no,
            radius: _this.radius_scale(parseInt(d.value) / 3.14),
            value: d.value,
            name: d.description,
            vendor: d.vendor,
            department: d.department,
            tender_no: d.tender_no,
            org: d.department,
            group: d.group,
            awarded_date: new Date(d.award_date),
            x: Math.random() * _this.width,
            y: Math.random() * _this.height
          };
          return _this.nodes.push(node);
        };
      })(this));
      return this.nodes.sort(function(a, b) {
        return b.value - a.value;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", (function(_this) {
        return function(d) {
          return _this.fill_color(d.group);
        };
      })(this)).attr("stroke-width", 2).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this)).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.hide_all_total = function() {
        this.vis.selectAll(".total-value").remove()
    }

    BubbleChart.prototype.display_all_total = function() {
      var total = 0
      this.data.forEach(function(d) {
        total += parseInt(d.value);
      })

      this.vis.selectAll(".total-value")
        .data(["Total tender value: R" + addCommas(total)])
        .enter().append("text")
          .attr("class", "total-value")
          .attr("x", this.width / 2)
          .attr("y", this.height - 50)
          .attr("text-anchor", "middle")
          .text(String)
    }

    BubbleChart.prototype.display_group_all = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.display_all_total();
      return this.hide_years();
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_year = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_year(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_all_total();
      return this.display_years();
    };

    BubbleChart.prototype.move_towards_year = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target = _this.year_centers[d.group];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_years = function() {
      var years, years_data;
      var me = this;
      years_data = d3.keys(this.dept_titles);
      years = this.vis.selectAll(".years").data(years_data);
     
      return years.enter().append("text")
          .attr("class", "years")
          .attr("x", (function(_this) {
              return function(d) {
                  return me.dept_titles[d].x;
              };
          })(this))
          .attr("y", function(d) {
            return me.dept_titles[d].y;
          })
          .attr("text-anchor", "middle").text(function(d) {
            return d;
      });
    };

    BubbleChart.prototype.hide_years = function() {
      var years;
      return years = this.vis.selectAll(".years").remove();
    };

    BubbleChart.prototype.display_total2 = function(total) {
        this.vis.selectAll(".total").data([total]).enter().append("text")
            .attr("class", "total")
            .attr("x", 0)
            .attr("y", 0)
            .text("Total: " + total)
    }

    BubbleChart.prototype.display_total = function(total) {
      var years, years_data;
      var me = this;
      years_data = d3.keys(this.dept_titles);
      years = this.vis.selectAll(".years").data(years_data);
     
      return years.enter().append("text")
          .attr("class", "years")
          .attr("x", (function(_this) {
              return function(d) {
                  return me.dept_titles[d].x;
              };
          })(this))
          .attr("y", function(d) {
            return me.dept_titles[d].y;
          })
          .attr("text-anchor", "middle").text(function(d) {
            return d;
      });
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      var date_string = $.format.date(data.awarded_date, "yyyy-MM-dd")
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">Tender No:</span><span class=\"value\"> " + data.tender_no + "</span><br/>";
      content += "<span class=\"name\">Description:</span><span class=\"value\"> " + data.name + "</span><br/>";
      content += "<span class=\"name\">Vendor:</span><span class=\"value\"> " + data.vendor + "</span><br/>";
      content += "<span class=\"name\">Department:</span><span class=\"value\"> " + data.department + "</span><br/>";
      content += "<span class=\"name\">Amount:</span><span class=\"value\"> R" + (addCommas(data.value)) + "</span><br/>";
      content += "<span class=\"name\">Awarded:</span><span class=\"value\"> " + date_string + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      d3.select(element).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this));
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_year();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.display_year = (function(_this) {
      return function() {
        return chart.display_by_year();
      };
    })(this);
    root.toggle_view = (function(_this) {
      return function(view_type) {
        if (view_type === 'all') {
          return root.display_all();
        } else {
          return root.display_year();
        }
      };
    })(this);
    return d3.csv("/data/tenders/tenders.csv", render_vis);
  });

}).call(this);
